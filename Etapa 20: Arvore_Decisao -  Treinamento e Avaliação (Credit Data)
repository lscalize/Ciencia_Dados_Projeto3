from sklearn.metrics import accuracy_score, classification_report
from yellowbrick.classifier import ConfusionMatrix
import pickle
from sklearn import tree
import matplotlib.pyplot as plt

# Carregando a base de dados de crédito
with open('credit.pkl', 'rb') as f:
    x_credit_treinamento, y_credit_treinamento, x_credit_teste, y_credit_teste = pickle.load(f)

# Inicializando e treinando o classificador de árvore de decisão
arvore_credit = DecisionTreeClassifier(criterion='entropy', random_state=0)
arvore_credit.fit(x_credit_treinamento, y_credit_treinamento)

# Realizando previsões
previsoes = arvore_credit.predict(x_credit_teste)

# Avaliando o modelo
print("Acurácia:", accuracy_score(y_credit_teste, previsoes))
print("Relatório de Classificação:\n", classification_report(y_credit_teste, previsoes))

# Matriz de confusão
cm = ConfusionMatrix(arvore_credit)
cm.fit(x_credit_treinamento, y_credit_treinamento)
cm.score(x_credit_teste, y_credit_teste)

# Visualizando a árvore de decisão
previsores = ['income', 'age', 'loan']
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(15, 15))
tree.plot_tree(arvore_credit, feature_names=previsores, class_names=str(arvore_credit.classes_), filled=True)
fig.savefig('arvore_credit.png')
